name: Clean news.json (hard scrub)

permissions:
  contents: write

on:
  workflow_dispatch: {}
  push:
    paths:
      - news.json
  schedule:
    - cron: '0 1 * * *' # ogni notte 01:00 UTC

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps
        run: npm install he

      - name: Scrub HTML/CSS from body fields
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const he = require('he');

          const PATH = 'news.json';
          const raw = fs.readFileSync(PATH, 'utf8');
          const data = JSON.parse(raw);

          const cssProps = [
            'color','margin','padding','font','background','display','position',
            'left','right','top','bottom','border','width','height','max-width',
            'min-width','line-height','text-align','justify-content','align-items',
            'flex','grid','z-index','overflow','opacity','box-shadow','transition',
            'transform','animation','visibility','letter-spacing','word-spacing',
            'white-space','object-fit','pointer-events','filter','stroke','fill'
          ];

          const propRe = new RegExp(String.raw`(?:^|\\s)(?:${cssProps.join('|')})\\s*:\\s*[^;{}]+;?`, 'gi');

          const stripCurlyBlocks = (s) => {
            // rimuove blocchi "selettore { ... }" e @media/@keyframes
            let prev;
            const block = /(?:^|[\s;@.#])[^{};]{0,300}\{[^{}]*\}/g;
            do { prev = s; s = s.replace(block, ' '); } while (s !== prev);
            return s.replace(/[{}]/g, ' ');
          };

          const clean = (v) => {
            if (typeof v !== 'string') return v;

            // 1) elimina <style>/<script>/<noscript>/<template>/iframe e commenti
            v = v.replace(/<style[\s\S]*?<\/style>/gi, '')
                 .replace(/<script[\s\S]*?<\/script>/gi, '')
                 .replace(/<noscript[\s\S]*?<\/noscript>/gi, '')
                 .replace(/<template[\s\S]*?<\/template>/gi, '')
                 .replace(/<iframe[\s\S]*?<\/iframe>/gi, '')
                 .replace(/<!--[\s\S]*?-->/g, '')
                 .replace(/\/\*[\s\S]*?\*\//g, '');

            // 2) togli tutti i tag html residui
            v = v.replace(/<[^>]+>/g, ' ');

            // 3) elimina blocchi CSS { ... } e @media/@keyframes
            v = stripCurlyBlocks(v);

            // 4) rimuovi selettori .classe, #id e token tipo .td-social-*
            v = v.replace(/(^|\s)[.#][a-z0-9_-]{2,}(?=[\s,{.;]|$)/gi, ' ');

            // 5) rimuovi proprietÃ  CSS isolate "prop: val;"
            v = v.replace(propRe, ' ');

            // 6) rimuovi var(--foo) e data: URIs
            v = v.replace(/var\(--[a-z0-9_-]+\)/gi, ' ')
                 .replace(/data:[^,]+,[^\s)]+/gi, ' ');

            // 7) decodifica entitÃ  (&nbsp; ecc.) e normalizza spazi
            v = he.decode(v).replace(/\u00A0/g, ' ');

            // 8) filtra righe palesemente CSS (2+ punti e virgola o tante parentesi)
            v = v.split(/\r?\n/).filter(line => {
              const l = line.trim();
              if (!l) return false;
              const semis = (l.match(/;/g) || []).length;
              if (semis >= 2) return false;
              if (/[{}]/.test(l)) return false;
              // scarta righe con 2+ proprietÃ  note
              let propsCount = 0;
              cssProps.forEach(p => { if (new RegExp(`\\b${p}\\b`, 'i').test(l)) propsCount++; });
              if (propsCount >= 2) return false;
              return true;
            }).join(' ');

            // 9) collassa spazi e ripulisci punteggiatura ripetuta
            v = v.replace(/\s+/g, ' ')
                 .replace(/\s([,.!?:;])/g, '$1')
                 .replace(/([,.!?:;]){2,}/g, '$1')
                 .trim();

            return v;
          };

          const scrubItems = (arr) => Array.isArray(arr)
            ? arr.map(sec => {
                if (sec && Array.isArray(sec.items)) {
                  sec.items = sec.items.map(it => it && typeof it === 'object'
                    ? { ...it, body: clean(it.body) }
                    : it
                  );
                }
                return sec;
              })
            : arr;

          if (Array.isArray(data.categories)) data.categories = scrubItems(data.categories);
          if (Array.isArray(data.categorie))  data.categorie  = scrubItems(data.categorie);

          fs.writeFileSync(PATH, JSON.stringify(data, null, 2), 'utf8');
          NODE

      - name: Commit & push
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "ðŸ”§ Deep-clean news.json body (remove HTML/CSS leftovers)"
          file_pattern: news.json
