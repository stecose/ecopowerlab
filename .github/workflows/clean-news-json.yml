name: Clean news.json (safe)

permissions:
  contents: write

on:
  workflow_dispatch: {}             # avvio manuale
  push:
    paths:
      - news.json                   # quando cambia il file
  schedule:
    - cron: '0 1 * * *'            # ogni notte 01:00 UTC

jobs:
  clean:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps
        run: npm install html-to-text he

      - name: Clean body fields
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const { htmlToText } = require('html-to-text');
          const he = require('he');

          const PATH = 'news.json';
          const raw = fs.readFileSync(PATH, 'utf8');
          const data = JSON.parse(raw);

          // ProprietÃ  CSS note (per eliminare solo righe che sono davvero CSS)
          const cssProps = [
            'color','margin','padding','font','background','display','position','left','right','top','bottom',
            'border','width','height','max-width','min-width','line-height','text-align','justify-content',
            'align-items','flex','grid','z-index','overflow','opacity','box-shadow','transition','transform',
            'animation','visibility','letter-spacing','word-spacing','white-space','object-fit','pointer-events',
            'filter','stroke','fill'
          ];
          const cssPropLine = new RegExp(
            String.raw`^\\s*(?:${cssProps.join('|')})\\s*:\\s*[^;{}]+;?\\s*$`,
            'i'
          );

          const removeCssBlocks = (txt) => {
            if (!txt) return txt;
            // Rimuovi @media/@keyframes e blocchi "selettore { ... }"
            txt = txt.replace(/@(?:media|supports|keyframes)[^{]*\{[\s\S]*?\}/gi, ' ');
            txt = txt.replace(/(^|\n)\s*[^{}\n]{1,200}\s*\{[^{}]*\}\s*/g, ' ');
            return txt;
          };

          const cleanText = (htmlOrText) => {
            if (typeof htmlOrText !== 'string') return htmlOrText;

            // 1) HTML -> testo (salta style/script/iframe/noscript/template/img/href)
            let t = htmlToText(htmlOrText, {
              wordwrap: false,
              preserveNewlines: true,
              selectors: [
                { selector: 'a', options: { ignoreHref: true } },
                { selector: 'img', format: 'skip' },
                { selector: 'style', format: 'skip' },
                { selector: 'script', format: 'skip' },
                { selector: 'noscript', format: 'skip' },
                { selector: 'template', format: 'skip' },
                { selector: 'iframe', format: 'skip' }
              ]
            });

            // 2) EntitÃ  -> caratteri reali
            t = he.decode(t).replace(/\u00A0/g, ' ');

            // 3) Elimina blocchi CSS rimasti in chiaro
            t = removeCssBlocks(t);

            // 4) Elimina SOLO le righe che sembrano proprietÃ  CSS isolate
            t = t.split(/\r?\n/).filter(line => !cssPropLine.test(line)).join('\n');

            // 5) Collassa spazi, normalizza righe vuote (mantiene paragrafi)
            t = t.replace(/[ \t]+\n/g, '\n')
                 .replace(/\n{3,}/g, '\n\n')   // max due a capo consecutivi
                 .replace(/[ \t]{2,}/g, ' ')
                 .replace(/\s+([,.!?:;])/g, '$1')
                 .replace(/([,.!?:;]){2,}/g, '$1')
                 .trim();

            return t;
          };

          const scrubSectionArray = (arr) => Array.isArray(arr)
            ? arr.map(sec => {
                if (sec && Array.isArray(sec.items)) {
                  sec.items = sec.items.map(it =>
                    it && typeof it === 'object'
                      ? { ...it, body: cleanText(it.body) }
                      : it
                  );
                }
                return sec;
              })
            : arr;

          if (Array.isArray(data.categories)) data.categories = scrubSectionArray(data.categories);
          if (Array.isArray(data.categorie))  data.categorie  = scrubSectionArray(data.categorie);

          fs.writeFileSync(PATH, JSON.stringify(data, null, 2), 'utf8');
          NODE

      - name: Commit & push cleaned JSON
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "ðŸ§¼ Safe clean news.json (htmlâ†’text, strip CSS blocks, keep content)"
          file_pattern: news.json
