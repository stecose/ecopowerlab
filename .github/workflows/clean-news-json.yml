name: Clean news.json

permissions:
  contents: write

on:
  workflow_dispatch: {}
  push:
    paths:
      - news.json
  schedule:
    - cron: '0 0 * * *'  # ogni notte alle 00:00 UTC

jobs:
  clean:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install helper (he)
        run: npm install he

      - name: Clean JSON body fields
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const he = require('he');

          const PATH = 'news.json';
          const raw = fs.readFileSync(PATH, 'utf8');
          const data = JSON.parse(raw);

          const clean = (val) => {
            if (typeof val !== 'string') return val;

            // 1) Rimuovi blocchi <style> e <script>
            val = val.replace(/<style[\s\S]*?<\/style>/gi, '')
                     .replace(/<script[\s\S]*?<\/script>/gi, '');

            // 2) Commenti HTML
            val = val.replace(/<!--[\s\S]*?-->/g, '');

            // 3) Tag HTML residui
            val = val.replace(/<[^>]+>/g, '');

            // 4) Blocchi CSS tipo "selettore { ... }"
            //    (conservativo: evita di mangiare testo con graffe casuali)
            val = val.replace(/(?:^|[\s;])[^{};]{1,200}\{[^{}]*\}(?=\s|;|$)/g, ' ');

            // 5) ProprietÃ  CSS isolate tipo "color:#fff;"
            val = val.replace(/(?:^|\s)[a-z-]{2,}\s*:\s*[^;{}]+;?/gi, ' ');

            // 6) Decodifica entitÃ  HTML (&nbsp; &amp; ecc.)
            val = he.decode(val).replace(/\u00A0/g, ' '); // nbsp -> spazio

            // 7) Collassa spazi e trim
            val = val.replace(/\s+/g, ' ').trim();

            return val;
          };

          const cleanItemsArray = (arr) =>
            Array.isArray(arr)
              ? arr.map(section => {
                  if (section && typeof section === 'object' && Array.isArray(section.items)) {
                    section.items = section.items.map(it =>
                      it && typeof it === 'object'
                        ? { ...it, body: clean(it.body) }
                        : it
                    );
                  }
                  return section;
                })
              : arr;

          if (Array.isArray(data.categories)) data.categories = cleanItemsArray(data.categories);
          if (Array.isArray(data.categorie))  data.categorie  = cleanItemsArray(data.categorie);

          fs.writeFileSync(PATH, JSON.stringify(data, null, 2), 'utf8');
          NODE

      - name: Commit & push cleaned JSON
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "ðŸ”„ Clean news.json (strip HTML/CSS, decode entities)"
          file_pattern: news.json
